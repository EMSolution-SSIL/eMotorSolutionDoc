"use strict";(self.webpackChunke_motor_solution_doc=self.webpackChunke_motor_solution_doc||[]).push([[919],{8453:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>o});var n=t(6540);const i={},r=n.createContext(i);function d(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(r.Provider,{value:s},e.children)}},9010:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"api/Analyses/PMSM/PMSM_Transient","title":"Transient","description":"The PMSM_Transient class is a specialized analysis for Permanent Magnet Synchronous Machines (PMSM) that calculates the transient response of the machine based on the initial conditions and operating parameters.","source":"@site/docs/api/Analyses/PMSM/PMSM_Transient.md","sourceDirName":"api/Analyses/PMSM","slug":"/api/Analyses/PMSM/PMSM_Transient","permalink":"/eMotorSolutionDoc/en/docs/api/Analyses/PMSM/PMSM_Transient","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Transient"},"sidebar":"apiSidebar","previous":{"title":"Back EMF","permalink":"/eMotorSolutionDoc/en/docs/api/Analyses/PMSM/PMSM_Back_EMF"},"next":{"title":"Static","permalink":"/eMotorSolutionDoc/en/docs/api/Analyses/PMSM/PMSM_Static"}}');var i=t(4848),r=t(8453);const d={sidebar_position:2,title:"Transient"},o="PMSM_Transient Analysis",l={},a=[{value:"Methods",id:"methods",level:2},{value:"Attributes",id:"attributes",level:2}];function c(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"pmsm_transient-analysis",children:"PMSM_Transient Analysis"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"PMSM_Transient"})," class is a specialized analysis for Permanent Magnet Synchronous Machines (PMSM) that calculates the transient response of the machine based on the initial conditions and operating parameters.\r\nIt corresponds to the ",(0,i.jsx)(s.a,{href:"/docs/docs/Analysis_PMSM/Transient",children:"Transient analysis"})," checkpoint in the eMotorSolution GUI.\r\nThe ",(0,i.jsx)(s.code,{children:"PMSM_Transient"})," class inherits from the ",(0,i.jsx)(s.a,{href:"/docs/api/Analyses/InputControl",children:(0,i.jsx)(s.code,{children:"MS_InputControl"})})," base class, which provides common functionality for managing analysis input data. It is accessible through ",(0,i.jsx)(s.code,{children:"eMotorSolution.CheckPoints.Analysis.PMSM.Transient.PMSM_Transient"}),"."]}),"\n",(0,i.jsx)(s.admonition,{title:"Parameters",type:"tip",children:(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"rotor_position_expression"}),": ",(0,i.jsx)(s.code,{children:"str"})," A mathematical expression defining the initial rotor position."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"rotor_position_unit"}),": ",(0,i.jsx)(s.code,{children:'Literal["deg", "rad"]'}),' The unit of the rotor position expression, either degrees ("deg") or radians ("rad").']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"rotor_speed_expression"}),": ",(0,i.jsx)(s.code,{children:"str"})," A mathematical expression defining the rotor speed."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"rotor_speed_unit"}),": ",(0,i.jsx)(s.code,{children:'Literal["rpm", "rad/s", "deg/s"]'}),' The unit of the rotor speed expression, which can be revolutions per minute ("rpm"), radians per second ("rad/s"), or degrees per second ("deg/s").']}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"delta_time_expression"}),": ",(0,i.jsx)(s.code,{children:"str"})," A mathematical expression defining the time step for the analysis."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"delta_time_unit"}),": ",(0,i.jsx)(s.code,{children:'Literal["min", "s", "ms", "us", "ns", "ps"]'})," The unit of the time step expression."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"num_time_steps_expression"}),": ",(0,i.jsx)(s.code,{children:"str"})," A mathematical expression defining the number of time steps for the analysis."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"save_fields"}),": ",(0,i.jsx)(s.code,{children:"bool"})," A flag indicating whether to save the field data during the analysis."]}),"\n"]})}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Method"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"set_rotor_position(value, unit)"}),(0,i.jsxs)(s.td,{children:["Sets the rotor position expression with ",(0,i.jsx)(s.code,{children:"value: str | float"})," and ",(0,i.jsx)(s.code,{children:'unit: Literal["deg", "rad"]'}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"set_rotor_speed(value, unit)"}),(0,i.jsxs)(s.td,{children:["Sets the rotor speed expression with ",(0,i.jsx)(s.code,{children:"value: str | float"})," and ",(0,i.jsx)(s.code,{children:'unit: Literal["rpm", "rad/s", "deg/s"]'}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"set_delta_time(value, unit)"}),(0,i.jsxs)(s.td,{children:["Sets the delta time expression with ",(0,i.jsx)(s.code,{children:"value: str | float"})," and ",(0,i.jsx)(s.code,{children:'unit: Literal["min", "s", "ms", "us", "ns", "ps"]'}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"set_num_time_steps(value)"}),(0,i.jsxs)(s.td,{children:["Sets the number of time steps expression with ",(0,i.jsx)(s.code,{children:"value: str | int"}),"."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"update()"}),(0,i.jsx)(s.td,{children:"Updates the input control based on the project data (e.g., materials, stator winding, rotor speed, etc.)."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"init_network()"}),(0,i.jsx)(s.td,{children:"Initializes the network settings for the analysis."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"init_time_functions()"}),(0,i.jsx)(s.td,{children:"Initializes the time functions for the analysis."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"save_json()"}),(0,i.jsx)(s.td,{children:"Saves the analysis data to a JSON file."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"purge_all()"}),(0,i.jsx)(s.td,{children:"Purges all the data in the analysis, resetting it to its default state."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"purge_solution()"}),(0,i.jsx)(s.td,{children:"Purges only the solution data in the analysis, keeping the input settings intact."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"run()"}),(0,i.jsx)(s.td,{children:"Executes the Back EMF analysis using the current input settings."})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"validate()"}),(0,i.jsx)(s.td,{children:"Returns the validation status in dictionary format."})]})]})]}),"\n",(0,i.jsx)(s.h2,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Attribute"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"rotor_position"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"float"})," The initial rotor position in ",(0,i.jsx)(s.code,{children:"deg"}),". ","\u26a0\ufe0f"," ",(0,i.jsx)(s.em,{children:"read-only"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"rotor_speed"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"float"})," The rotor speed in ",(0,i.jsx)(s.code,{children:"deg/s"}),". ","\u26a0\ufe0f"," ",(0,i.jsx)(s.em,{children:"read-only"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"delta_time"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"float"})," The time step in ",(0,i.jsx)(s.code,{children:"s"}),". ","\u26a0\ufe0f"," ",(0,i.jsx)(s.em,{children:"read-only"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"num_time_steps"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"int"})," The number of time steps. ","\u26a0\ufe0f"," ",(0,i.jsx)(s.em,{children:"read-only"})]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"save_fields"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"bool"})," A flag indicating whether to save the field data during the analysis."]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"sliding_mesh_properties"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:"dict"})," A dictionary containing the sliding mesh properties for the analysis. ","\u26a0\ufe0f"," ",(0,i.jsx)(s.em,{children:"read-only"})]})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);